const formBuilder={};formBuilder.buildForm=(options)=>{options=options||{};if(typeof options!=='object'||options==null){console.error('options is not a valid object');return null}options.fieldsets=options.fieldsets||[];if(!Array.isArray(options.fieldsets)){console.error('options.fieldset is not an array');return null}options.attributes=options.attributes||{};if(typeof options.attributes!=='object'||options.attributes==null){console.error('options.attributes is not a valid object');return null}const form=document.createElement('form');const rightNow=new Date();form.id=rightNow.getTime();if(options.submit){if({}.toString.call(options.submit)!=='[object Function]'){console.error('options.submit is not a valid function');return}document.addEventListener('submit',(e)=>{if(e.target&&e.target.id===form.id){options.submit(e)}})}const attributes=Object.keys(options.attributes);attributes.forEach(attribute=>{if(formBuilder.isValidFormAttribute(attribute)){form.setAttribute(attribute,options.attributes[attribute])}else{console.warn(`'${ attribute }' is an invalid form attribute.`)}});options.fieldsets.forEach(fieldset=>{const fieldsetElement=formBuilder.buildFieldset(fieldset);if(fieldsetElement){form.append(fieldsetElement)}});return form};formBuilder.buildDatalist=(datalist)=>{if(typeof datalist!=='object'||datalist==null){return null}if(!datalist.hasOwnProperty('id')){console.error('datalist is missing the required property \'id\'');return null}if(!datalist.hasOwnProperty('values')){console.error('datalist is missing the required property \'values\'');return null}if(!Array.isArray(datalist.values)){console.error('datalist.values is not an array');return null}const datalistElement=document.createElement('datalist');datalistElement.id=datalist.id;datalist.values.forEach(value=>{const option=document.createElement('option');option.value=value;datalistElement.append(option)});return datalistElement};formBuilder.buildFieldset=(fieldset)=>{if(typeof fieldset!=='object'||fieldset==null){console.error('fieldset is not a valid object');return null}fieldset.fields=fieldset.fields||[];if(!Array.isArray(fieldset.fields)){console.error('fieldset.fields is not an array');return null}const fieldsetElement=document.createElement('fieldset');if(fieldset.legend){if(Object.prototype.toString.call(fieldset.legend)!=="[object String]"){console.warn('fieldset.legend is not a string')}else{const legend=document.createElement('legend');legend.innerHTML=fieldset.legend;fieldsetElement.append(legend)}}fieldset.fields.forEach(field=>{const divContainer=document.createElement('div');divContainer.setAttribute('class','mb-3');let fieldType='text';if(formBuilder.isValidFieldType(field)){fieldType=field.type}else{if(typeof field.type!=='undefined'){console.warn(`${field.type } is not a valid input type. Defaulting to text.`)}}if(field.label){if(Object.prototype.toString.call(field.label)!=="[object String]"){console.warn('field.label is not a string')}else{let id=null;if(field.attributes&&field.attributes.id){id=field.attributes.id}const label=formBuilder.buildLabel(field.label,id);if(label){divContainer.append(label)}}}const input=formBuilder.buildInput(field,fieldType);if(input){divContainer.append(input)}if(field.hasOwnProperty('datalist')&&typeof field.datalist==='object'&&field.datalist!==null){const datalist=formBuilder.buildDatalist(field.datalist);if(datalist){divContainer.append(datalist);input.setAttribute('list',field.datalist.id)}}fieldsetElement.append(divContainer)});return fieldsetElement};formBuilder.buildInput=(field,fieldType)=>{if(typeof field!=='object'||field==null){return null}if(Object.prototype.toString.call(fieldType)!=="[object String]"){return null}if(fieldType==='select'){return formBuilder.buildSelect(field)}const input=document.createElement('input');input.setAttribute('type',fieldType);const attributes=Object.keys(field.attributes);attributes.forEach(attribute=>{if(formBuilder.isValidInputAttribute(fieldType,attribute)){input.setAttribute(attribute,field.attributes[attribute])}else{console.warn(`'${ attribute }' is an invalid attribute for ${ fieldType }.`)}});if(attributes.indexOf('class')<0||attributes.class.indexOf('form-control')<0){input.classList.add('form-control')}return input};formBuilder.buildLabel=(label,id=null)=>{if(Object.prototype.toString.call(label)!=="[object String]"){return null}const labelElement=document.createElement('label');labelElement.setAttribute('class','form-label');labelElement.innerHTML=label;if(id){labelElement.setAttribute('for',id)}return labelElement};formBuilder.buildOption=(option)=>{if(Object.prototype.toString.call(option)==="[object String]"){const optionElement=document.createElement('option');optionElement.setAttribute('value',option);optionElement.innerHTML=option;return optionElement}else if(typeof option==='object'){const optionElement=document.createElement('option');const optionKeys=Object.keys(option);if(optionKeys.indexOf('optgroup')>-1){const optGroupKeys=Object.keys(option.optgroup);if(optGroupKeys.indexOf('label')<0){console.error('\'optgroup\' requires a \'label\' attribute.');return}const optGroupElement=document.createElement('optgroup');optGroupElement.setAttribute('label',option.optgroup.label);if(optGroupKeys.indexOf('options')>-1){if(!Array.isArray(option.optgroup.options)){console.error('\'optgroup\' options is invalid. Expected type is an array.');return null}option.optgroup.options.forEach(innerOption=>{const innerOptionElement=formBuilder.buildOption(innerOption);if(innerOptionElement){optGroupElement.append(innerOptionElement)}})}return optGroupElement}else{if(optionKeys.indexOf('text')>-1){optionElement.innerHTML=option.text}if(optionKeys.indexOf('value')>-1){optionElement.setAttribute('value',option.value)}return optionElement}}else{console.error('\'option\' is invalid. Expected type is string or object.');return null}}formBuilder.buildSelect=(field)=>{const attributes=Object.keys(field.attributes);if(attributes.indexOf('options')<0){console.error('\'select\' types must have an \'options\' attribute.');return null}if(!Array.isArray(field.attributes.options)){console.error('\'select\' types must have an \'options\' attribute that is an array.');return null}const select=document.createElement('select');attributes.forEach(attribute=>{if(attribute==='options'){return}else if(formBuilder.isValidInputAttribute('select',attribute)){select.setAttribute(attribute,field.attributes[attribute])}else{console.warn(`'${ attribute }' is an invalid attribute for ${ fieldType }.`)}});field.attributes.options.forEach(option=>{const optionElement=formBuilder.buildOption(option);if(optionElement){select.append(optionElement)}});if(attributes.indexOf('class')<0||attributes.class.indexOf('form-select')<0){select.classList.add('form-select')}return select}formBuilder.isValidFieldType=(field)=>{if(typeof field!=='object'||field==null||!field.hasOwnProperty('type')){return false}const acceptedTypes=['checkbox','color','date','datetime-local','email','file','hidden','month','number','password','radio','range','search','select','tel','text','time','url','week'];return acceptedTypes.indexOf(field.type)>-1};formBuilder.isValidFormAttribute=(attribute)=>{if(Object.prototype.toString.call(attribute)!=="[object String]"){return false}const attributes=['accept','accept-charset','accesskey','action','autocapitalize','autocomplete','autofocus','class','contenteditable','context-menu','dir','draggable','enctype','enterkeyhint','exportparts','hidden','id','inputmode','is','itemid','itemprop','itemref','itemscope','itemtype','lang','method','name','nonce','novalidate','part','rel','slot','spellcheck','style','tabindex','target','title','translate'];if(attributes.indexOf(attribute)>-1){return true}if(attribute.indexOf('data-')>0&&attribute.length>5){return true}return false};formBuilder.isValidInputAttribute=(type,attribute)=>{if(Object.prototype.toString.call(attribute)!=="[object String]"){return false}const allTypeAttributes=['accesskey','autocapitalize','autocomplete','autofocus','class','contenteditable','context-menu','dir','disabled','draggable','enterkeyhint','exportparts','form','hidden','id','inputmode','is','itemid','itemprop','itemref','itemscope','itemtype','lang','list','name','nonce','part','readonly','required','slot','spellcheck','style','tabindex','title','translate','value'];if(allTypeAttributes.indexOf(attribute)>-1){return true}if(attribute.indexOf('data-')>0&&attribute.length>5){return true}if(type==='checkbox'){const checkboxAttributes=['checked'];return checkboxAttributes.indexOf(attribute)>-1}if(type==='color'){const colorAttributes=['list'];return colorAttributes.indexOf(attribute)>-1}if(type==='date'){const dateAttributes=['list','max','min','readonly','required','step'];return dateAttributes.indexOf(attribute)>-1}if(type==='datetime-local'){const datetimeLocalAttributes=['list','max','min','readonly','required','step'];return datetimeLocalAttributes.indexOf(attribute)>-1}if(type==='email'){const emailAttributes=['list','placeholder','readonly','required'];return emailAttributes.indexOf(attribute)>-1}if(type==='file'){const fileAttributes=['accept','capture','multiple','required'];return fileAttributes.indexOf(attribute)>-1}if(type==='hidden'){return false}if(type==='month'){const monthAttributes=['list','max','min','placeholder','readonly','required','step'];return monthAttributes.indexOf(attribute)>-1}if(type==='number'){const numberAttributes=['max','min','placeholder','required','step'];return numberAttributes.indexOf(attribute)>-1}if(type==='password'){const passwordAttributes=['maxlength','minlength','readonly','required','pattern','placeholder','size'];return passwordAttributes.indexOf(attribute)>-1}if(type==='radio'){const radioAttributes=['checked'];return radioAttributes.indexOf(attribute)>-1}if(type==='range'){const rangeAttributes=['list'];return rangeAttributes.indexOf(attribute)>-1}if(type==='search'){const searchAttributes=['dirname','list','maxlength','minlength','placeholder','readonly','required'];return searchAttributes.indexOf(attribute)>-1}if(type==='select'){const selectAttributes=['multiple','placeholder','size']}if(type==='tel'){const telAttributes=['list','maxlength','minlength','pattern','placeholder','readonly','required','size'];return telAttributes.indexOf(attribute)>-1}if(type==='text'){const textAttributes=['dirname','list','maxlength','minlength','pattern','placeholder','readonly','required','size'];return textAttributes.indexOf(attribute)>-1}if(type==='time'){const timeAttributes=['list','max','min','readonly','required','step'];return timeAttributes.indexOf(attribute)>-1}if(type==='url'){const timeAttributes=['list','maxlength','minlength','placeholder','readonly','required'];return timeAttributes.indexOf(attribute)>-1}if(type==='week'){const weekAttributes=['list','max','min','placeholder','readonly','required','step'];return weekAttributes.indexOf(attribute)>-1}return false};
